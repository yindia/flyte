name: Create a flyte release
on:
  workflow_dispatch:
    inputs:
      version:
        description: "version name. example v0.1.1"
        required: true

jobs:
  bump-version:
    name: bump-version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump-version.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - name: Bump version and push tag
        id: bump-version
        uses: anothrNick/github-tag-action@1.36.0
        env:
          GITHUB_TOKEN: ${{ secrets.FLYTE_BOT_PAT }}
          WITH_V: true
          CUSTOM_TAG: ${{ inputs.version }}
          RELEASE_BRANCHES: master

  publish-flyte-component-image:
    name: Publish flyte component image for the release version
    runs-on: ubuntu-latest
    needs: [bump-version]
    strategy:
      matrix:
        component:
          [
            flyteconsole,
            flytepropeller,
            flyteadmin,
            datacatalog,
            flytescheduler,
            flytecopilot,
          ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - name: yq - portable yaml processor
        uses: mikefarah/yq@v4.15.1

      - name: Get Latest Version of component
        id: set_version
        run: |
          if [ ${{ matrix.component }} = "flytecopilot" ]; then
             echo ::set-output name=version::$(yq eval '.configmap.copilot.plugins.k8s.co-pilot.image' charts/flyte-core/values.yaml | cut -d ":" -f 2 )
          else
             echo ::set-output name=version::$(yq eval '.${{ matrix.component }}.image.tag' charts/flyte-core/values.yaml)
          fi
        shell: bash

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: "${{ secrets.FLYTE_BOT_USERNAME }}"
          password: "${{ secrets.FLYTE_BOT_PAT }}"

      - name: Tag Image to release version
        run: |
          docker pull ghcr.io/flyteorg/${{ matrix.component }}:${{ steps.set_version.outputs.version }}
          docker tag ghcr.io/flyteorg/${{ matrix.component }}:${{ steps.set_version.outputs.version }} ghcr.io/evalsocket/${{ matrix.component }}-release:${{ inputs.version }}
          docker push ghcr.io/evalsocket/${{ matrix.component }}-release:${{ inputs.version }}

          docker tag ghcr.io/flyteorg/${{ matrix.component }}:${{ steps.set_version.outputs.version }} ghcr.io/evalsocket/${{ matrix.component }}-release:latest
          docker push ghcr.io/evalsocket/${{ matrix.component }}-release:latest

  trigger-sandbox-publish:
    name: Sandbox build
    needs: [publish-flyte-component-image]
    uses: ./.github/workflows/buildx_build.yaml
    with:
      context: .
      dockerfile: docker/sandbox/Dockerfile
      repository: flyte-sandbox
      version: ${{ inputs.version }}
      args: "FLYTE_VERSION=${{ inputs.version }}"
      push: true
    secrets:
      FLYTE_BOT_PAT: ${{ secrets.FLYTE_BOT_PAT }}
      FLYTE_BOT_USERNAME: ${{ secrets.FLYTE_BOT_USERNAME }}

  trigger-single-binary-build:
    name: Single Binary build
    needs: [publish-flyte-component-image]
    uses: ./.github/workflows/buildx_build.yaml
    with:
      context: .
      dockerfile:  Dockerfile
      repository: flyte-single-binary
      version: ${{ inputs.version }}
      args: "FLYTE_VERSION=${{ inputs.version }}"
      push: true
    secrets:
      FLYTE_BOT_PAT: ${{ secrets.FLYTE_BOT_PAT }}
      FLYTE_BOT_USERNAME: ${{ secrets.FLYTE_BOT_USERNAME }}

  trigger-sandbox-lite-build:
    name: Sandbox lite build
    needs: [publish-flyte-component-image]
    uses: ./.github/workflows/buildx_build.yaml
    with:
      context: .
      dockerfile:  docker/sandbox-lite/Dockerfile
      repository: flyte-sandbox-lite
      version: ${{ inputs.version }}
      args: "FLYTE_VERSION=${{ inputs.version }}"
      push: true
    secrets:
      FLYTE_BOT_PAT: ${{ secrets.FLYTE_BOT_PAT }}
      FLYTE_BOT_USERNAME: ${{ secrets.FLYTE_BOT_USERNAME }}

  trigger-sandbox-ultra-build:
    name: Sandbox ultra build
    needs: [trigger-single-binary-build]
    uses: ./.github/workflows/buildx_build.yaml
    with:
      context: docker/sandbox-lite
      dockerfile:  docker/sandbox-ultra/images/dockerfiles/k3s/Dockerfile
      repository: flyte-sandbox-ultra
      args: "FLYTE_VERSION=${{ inputs.version }}"
      version: ${{ inputs.version }}
      push: true
    secrets:
      FLYTE_BOT_PAT: ${{ secrets.FLYTE_BOT_PAT }}
      FLYTE_BOT_USERNAME: ${{ secrets.FLYTE_BOT_USERNAME }}

  helm-release:
    name: Flyte helm release
    runs-on: ubuntu-latest
    needs: [bump-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - name: Install Helm
        uses: azure/setup-helm@v1

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"
      - name: Preprare Flyte Helm Release
        env:
          VERSION: ${{ inputs.version }}
          REPOSITORY: "https://evalsocket.github.io/flyte"
        run: |
          make prepare_artifacts
      - name: Run chart-releaser
        uses: stefanprodan/helm-gh-pages@v1.4.1
        with:
          token: "${{ secrets.FLYTE_BOT_PAT }}"
          linting: off

  manifest-release:
    name: Flyte manifest release
    runs-on: ubuntu-latest
    needs: [bump-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"

      - name: Preprare Flyte Release
        env:
          VERSION: ${{ inputs.version }}
        run: |
          make prepare_artifacts
          git stash

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist 
        env:
          GITHUB_TOKEN: ${{ secrets.FLYTE_BOT_PAT }}
