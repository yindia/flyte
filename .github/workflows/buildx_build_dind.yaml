name: Build & Push Docker Image

on:
  workflow_call:
    inputs:
      dockerfile:
        description: "Dockerfile name"
        required: true
        type: string
      context:
        description: "Context"
        required: true
        type: string
      version:
        description: "Version of image"
        required: true
        type: string
      repository:
        description: "Repository Name"
        required: false
        type: string
      args:
        description: "Docker build Args"
        required: false
        type: string
      push:
        description: "Push to registry"
        required: false
        type: boolean
    secrets:
      FLYTE_BOT_USERNAME:
        required: true
      FLYTE_BOT_PAT:
        required: true
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: Prepare DIND Image Names
        id: dind-names
        uses: docker/metadata-action@v3
        with:
          # list of Docker images to use as base name for tags
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ inputs.repository }}
          tags: |
            ${{ inputs.version }}
            type=sha,format=long, prefix=dind-
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        if: ${{ inputs.push }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: "${{ secrets.FLYTE_BOT_USERNAME }}"
          password: "${{ secrets.FLYTE_BOT_PAT }}"
      - name: Build and push DIND Image
        uses: docker/build-push-action@v3
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        with:
          context: ${{ inputs.context }}
          platforms: linux/arm64, linux/amd64
          push: ${{ inputs.push }}
          tags: ${{ steps.dind-names.outputs.tags }}
          build-args: ${{ inputs.args }}
          file: ${{ inputs.dockerfile }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

